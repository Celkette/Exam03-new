/*
Nom de l'affectation : ft_scanf
Fichiers attendus : ft_scanf.c
Fonctions autorisées : fgetc, ungetc, ferror, feof, isspace, isdigit, stdin, 
va_start, va_arg, va_copy, va_end
--------------------------------------------------------------------------------

Écrivez une fonction nommée « ft_scanf » qui reproduira le scanf réel avec les 
contraintes suivantes :

- Elle ne gérera que les conversions suivantes : s, d et c
- Vous n'avez pas à gérer les options *, m et '
- Vous n'avez pas à gérer la largeur maximale du champ
- Vous n'avez pas à gérer les caractères de modification de type (h, hh, l, etc.)
- Vous n'avez pas à gérer les conversions commençant par %n$

Votre fonction doit être déclarée comme suit :

int ft_scanf(const char *, ... );

Vous trouverez dans ce répertoire un fichier contenant une partie du code dont 
vous aurez besoin ; il vous suffit de le compléter.

Pour tester votre programme, comparez vos résultats avec ceux du scanf réel.

Indice : Vous devrez peut-être lire le manuel de scanf.
*/
#include <stdarg.h>
#include <stdio.h>
#include <ctype.h>

int match_space(FILE *f)
{
        // You may insert code here
    return (0);
}

int match_char(FILE *f, char c)
{
        // You may insert code here
    return (0);
}

int scan_char(FILE *f, va_list ap)
{
        // You may insert code here
    return (0);
}

int scan_int(FILE *f, va_list ap)
{
        // You may insert code here
    return (0);
}

int scan_string(FILE *f, va_list ap)
{
        // You may insert code here
    return (0);
}


int	match_conv(FILE *f, const char **format, va_list ap)
{
	switch (**format)
	{
		case 'c':
			return scan_char(f, ap);
		case 'd':
			match_space(f);
			return scan_int(f, ap);
		case 's':
			match_space(f);
			return scan_string(f, ap);
		case EOF:
			return -1;
		default:
			return -1;
	}
}

int ft_vfscanf(FILE *f, const char *format, va_list ap)
{
	int nconv = 0;

	int c = fgetc(f);
	if (c == EOF)
		return EOF;
	ungetc(c, f);

	while (*format)
	{
		if (*format == '%')
		{
			format++;
			if (match_conv(f, &format, ap) != 1)
				break;
			else
				nconv++;
		}
		else if (isspace(*format))
		{
			if (match_space(f) == -1)
				break;
		}
		else if (match_char(f, *format) != 1)
			break;
		format++;
	}
	
	if (ferror(f))
		return EOF;
	return nconv;
}


int ft_scanf(const char *format, ...)
{
	// ...
	int ret = ft_vfscanf(stdin, format, ap);
	// ...
	return ret;
}
