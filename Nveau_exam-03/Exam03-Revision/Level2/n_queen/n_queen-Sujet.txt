Assignement name : n_queens

Expected files : *.c *.h

Allowed functions : atoi, fprintf, write

-------------------------------------------------------------------------

Write a program that will print all the solutions to the n queens problem
for a n given as argument.
We will not test with negative values.
The order of the solutions is not important.

You will display the solutions under the following format :
<p1> <p2> <p3> ... \n
where pn are the line index of the queen in each colum starting from 0.

For example this should work :
$> ./n_queens 2 | cat -e

$> ./n_queens 4 | cat -e
1 3 0 2$
2 0 3 1$

$> ./n_queens 7 | cat -e
0 2 4 6 1 3 5$
0 3 6 2 5 1 4$
etc...

NOTE: what is the N-queens problem? 
The N-Queens problem is a classic algorithmic puzzle in computer science and discrete mathematics. 
It asks: how can you place N chess queens on an N×N chessboard so that no two queens threaten each other? 
According to some sources, this means no two queens can share the same row, column, or diagonal. 
Here's a breakdown:
The Goal:
The objective is to find all possible configurations (or a single configuration) of queen placements that satisfy the constraint of no attacks. 
The Constraints:
Queens attack horizontally, vertically, and diagonally. 
Therefore, a valid solution requires that no two queens occupy the same row, column, or diagonal. 
Complexity:
The N-Queens problem is known to be NP-complete for the decision problem (whether a solution exists), and also for the problem of finding a single solution. 
Common Solutions:
Backtracking algorithms are frequently used to solve the N-Queens problem efficiently. 
The problem can be represented as a set of permutations of the numbers 1 to N, where each number represents the row of a queen in a given column. 
For example, for N=4, a solution might be represented as the permutation, which means: 
Column 1 has a queen in row 2.
Column 2 has a queen in row 4.
Column 3 has a queen in row 1.
Column 4 has a queen in row 3.
The N-Queens problem is a good example of how seemingly simple rules can lead to complex algorithmic challenges. 
It's also a problem with applications in areas like scheduling and resource allocation. 

**************************************************
**************************************************
**				  	VERSION FR			 		**
**************************************************
**************************************************

// Le sujet a été légèrement modifié (fonctions autorisées)

Nom de l'affectation : n_queens

Fichiers attendus : *.c *.h

Fonctions autorisées : atoi, fprintf, write

-------------------------------------------------------------------------

Écrivez un programme qui affichera toutes les solutions du problème des n queens
pour un paramètre n donné en argument.
Nous ne testerons pas avec des valeurs négatives.
L'ordre des solutions n'a pas d'importance.

Vous afficherez les solutions sous le format suivant :
<p1> <p2> <p3> ... \n
où pn est l'indice de ligne de la reine dans chaque colonne, à partir de 0.

Par exemple, ceci devrait fonctionner :
$> ./n_queens 2 | cat -e

$> ./n_queens 4 | cat -e
1 3 0 2$
2 0 3 1$

$> ./n_queens 7 | cat -e
0 2 4 6 1 3 5$
0 3 6 2 5 1 4$
etc...

REMARQUE : Qu'est-ce que le problème des n_queens ?
Le problème des n_queens est un casse-tête algorithmique classique en informatique et en mathématiques discrètes.
Il pose la question suivante : comment placer N reines sur un échiquier n×n de manière à ce qu'aucune reine ne se menace ?

Selon certaines sources, cela signifie que deux reines ne peuvent pas partager la même ligne, la même colonne ou la même diagonale.

En voici le détail :
Objectif :
L'objectif est de trouver toutes les configurations possibles (ou une configuration unique) de placements de reines qui satisfont à la contrainte d'absence d'attaque.

Contraintes :
Les reines attaquent horizontalement, verticalement et en diagonale.

Par conséquent, une solution valide nécessite qu'aucune reine n'occupe la même ligne, la même colonne ou la même diagonale.

Complexité :
Le problème des n_queens est connu pour être NP-complet pour le problème de décision (existence ou non d'une solution), ainsi que pour le problème de recherche d'une solution unique.
Solutions courantes :
Les algorithmes de retour en arrière sont fréquemment utilisés pour résoudre efficacement le problème des n_queens.
Ce problème peut être représenté par un ensemble de permutations des nombres de 1 à N, où chaque nombre représente la ligne d'une reine dans une colonne donnée.
Par exemple, pour N = 4, une solution peut être représentée par la permutation, ce qui signifie :
La colonne 1 a une reine sur la ligne 2.
La colonne 2 a une reine sur la ligne 4.
La colonne 3 a une reine sur la ligne 1.
La colonne 4 a une reine sur la ligne 3.
Le problème des n_queens illustre bien comment des règles apparemment simples peuvent engendrer des défis algorithmiques complexes.
C'est également un problème pour les applications dans des domaines tels que l'ordonnancement et l'allocation des ressources.